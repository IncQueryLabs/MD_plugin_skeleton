package sysml

import "http://www.nomagic.com/magicdraw/UML/2.5.1"

// Activities

/*
 * Pattern that queries elements with the stereotype 'Allocate' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Allocate.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Allocate(element : Abstraction, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Allocate");
}
/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'Allocate'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Allocate'.
 * 	value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern Allocate_sourceContext(element : Abstraction, value : Classifier){
	find Allocate(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'Allocate'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Allocate'.
 * 	value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern Allocate_sourcePropertyPath(element : Abstraction, value : Property){
	find Allocate(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'Allocate'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Allocate'.
 * 	value : Classifier : A value of the attribute 'targetContext'.
 */
pattern Allocate_targetContext(element : Abstraction, value : Classifier){
	find Allocate(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'Allocate'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Allocate'.
 * 	value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern Allocate_targetPropertyPath(element : Abstraction, value : Property){
	find Allocate(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'AllocateActivityPartition' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ActivityPartition' object with the stereotype AllocateActivityPartition.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern AllocateActivityPartition(element : ActivityPartition, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "AllocateActivityPartition");
}

// Allocations


/*
 * Pattern that queries elements with the stereotype 'Continuous' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'NamedElement' object with the stereotype Continuous.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Continuous(element : NamedElement, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Continuous");
}
/*
 * Pattern that queries the 'rate' attribute of elements with the stereotype 'Continuous'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'Continuous'.
 * 	value : InstanceSpecification : A value of the attribute 'rate'.
 */
pattern Continuous_rate(element : NamedElement, value : InstanceSpecification){
	find Continuous(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "rate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ControlOperator' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ParameterableElement' object with the stereotype ControlOperator.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ControlOperator(element : ParameterableElement, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ControlOperator");
}
/*
 * Pattern that queries elements with the stereotype 'Discrete' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'NamedElement' object with the stereotype Discrete.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Discrete(element : NamedElement, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Discrete");
}
/*
 * Pattern that queries the 'rate' attribute of elements with the stereotype 'Discrete'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'Discrete'.
 * 	value : InstanceSpecification : A value of the attribute 'rate'.
 */
pattern Discrete_rate(element : NamedElement, value : InstanceSpecification){
	find Discrete(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "rate", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'NoBuffer' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ObjectNode' object with the stereotype NoBuffer.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern NoBuffer(element : ObjectNode, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "NoBuffer");
}
/*
 * Pattern that queries elements with the stereotype 'Optional' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Parameter' object with the stereotype Optional.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Optional(element : Parameter, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Optional");
}
/*
 * Pattern that queries elements with the stereotype 'Overwrite' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ObjectNode' object with the stereotype Overwrite.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Overwrite(element : ObjectNode, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Overwrite");
}
/*
 * Pattern that queries elements with the stereotype 'Probability' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'NamedElement' object with the stereotype Probability.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Probability(element : NamedElement, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Probability");
}
/*
 * Pattern that queries the 'probability' attribute of elements with the stereotype 'Probability'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'Probability'.
 * 	valuespec : LiteralString : A value of the attribute 'probability'.
 */
pattern Probability_probability(element : NamedElement, valuespec : LiteralString){
	find Probability(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "probability", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'Rate' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'NamedElement' object with the stereotype Rate.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Rate(element : NamedElement, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Rate");
}
/*
 * Pattern that queries the 'rate' attribute of elements with the stereotype 'Rate'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'Rate'.
 * 	value : InstanceSpecification : A value of the attribute 'rate'.
 */
pattern Rate_rate(element : NamedElement, value : InstanceSpecification){
	find Rate(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "rate", valuespec);
	ElementValue.element(valuespec, value);
}

// Blocks

/*
 * Pattern that queries elements with the stereotype 'ConstraintBlock' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype ConstraintBlock.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ConstraintBlock(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ConstraintBlock");
}
/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'ConstraintBlock'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'ConstraintBlock'.
 * 	valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern ConstraintBlock_isEncapsulated(element : Class, valuespec : LiteralBoolean){
	find ConstraintBlock(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

// ConstraintBlocks

/*
 * Pattern that queries elements with the stereotype 'AdjunctProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype AdjunctProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern AdjunctProperty(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "AdjunctProperty");
}
/*
 * Pattern that queries the 'principal' attribute of elements with the stereotype 'AdjunctProperty'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'AdjunctProperty'.
 * 	value : Element : A value of the attribute 'principal'.
 */
pattern AdjunctProperty_principal(element : Property, value : Element){
	find AdjunctProperty(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "principal", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'BindingConnector' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Connector' object with the stereotype BindingConnector.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern BindingConnector(element : Connector, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "BindingConnector");
}
/*
 * Pattern that queries elements with the stereotype 'Block' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Block.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Block(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Block");
}
/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Block'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Block'.
 * 	valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Block_isEncapsulated(element : Class, valuespec : LiteralBoolean){
	find Block(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'BoundReference' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype BoundReference.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern BoundReference(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "BoundReference");
}
/*
 * Pattern that queries the 'bindingPath' attribute of elements with the stereotype 'BoundReference'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'BoundReference'.
 * 	value : Property : A value of the attribute 'bindingPath'.
 */
pattern BoundReference_bindingPath(element : Property, value : Property){
	find BoundReference(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "bindingPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'boundEnd' attribute of elements with the stereotype 'BoundReference'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'BoundReference'.
 * 	value : ConnectorEnd : A value of the attribute 'boundEnd'.
 */
pattern BoundReference_boundEnd(element : Property, value : ConnectorEnd){
	find BoundReference(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "boundEnd", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'lower' attribute of elements with the stereotype 'BoundReference'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'BoundReference'.
 * 	valuespec : LiteralInteger : A value of the attribute 'lower'.
 */
pattern BoundReference_lower(element : Property, valuespec : LiteralInteger){
	find BoundReference(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "lower", valuespec);
}
/*
 * Pattern that queries the 'upper' attribute of elements with the stereotype 'BoundReference'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'BoundReference'.
 * 	valuespec : LiteralUnlimitedNatural : A value of the attribute 'upper'.
 */
pattern BoundReference_upper(element : Property, valuespec : LiteralUnlimitedNatural){
	find BoundReference(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "upper", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'ClassifierBehaviorProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ClassifierBehaviorProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ClassifierBehaviorProperty(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ClassifierBehaviorProperty");
}
/*
 * Pattern that queries elements with the stereotype 'ConnectorProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ConnectorProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ConnectorProperty(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ConnectorProperty");
}
/*
 * Pattern that queries the 'connector' attribute of elements with the stereotype 'ConnectorProperty'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'ConnectorProperty'.
 * 	value : Connector : A value of the attribute 'connector'.
 */
pattern ConnectorProperty_connector(element : Property, value : Connector){
	find ConnectorProperty(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "connector", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'DirectedRelationshipPropertyPath' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DirectedRelationship' object with the stereotype DirectedRelationshipPropertyPath.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern DirectedRelationshipPropertyPath(element : DirectedRelationship, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "DirectedRelationshipPropertyPath");
}
/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'DirectedRelationshipPropertyPath'.
 * 
 * Parameters: 
 * 	element: 'DirectedRelationship' object with the stereotype 'DirectedRelationshipPropertyPath'.
 * 	value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern DirectedRelationshipPropertyPath_sourceContext(element : DirectedRelationship, value : Classifier){
	find DirectedRelationshipPropertyPath(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'DirectedRelationshipPropertyPath'.
 * 
 * Parameters: 
 * 	element: 'DirectedRelationship' object with the stereotype 'DirectedRelationshipPropertyPath'.
 * 	value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern DirectedRelationshipPropertyPath_sourcePropertyPath(element : DirectedRelationship, value : Property){
	find DirectedRelationshipPropertyPath(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'DirectedRelationshipPropertyPath'.
 * 
 * Parameters: 
 * 	element: 'DirectedRelationship' object with the stereotype 'DirectedRelationshipPropertyPath'.
 * 	value : Classifier : A value of the attribute 'targetContext'.
 */
pattern DirectedRelationshipPropertyPath_targetContext(element : DirectedRelationship, value : Classifier){
	find DirectedRelationshipPropertyPath(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'DirectedRelationshipPropertyPath'.
 * 
 * Parameters: 
 * 	element: 'DirectedRelationship' object with the stereotype 'DirectedRelationshipPropertyPath'.
 * 	value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern DirectedRelationshipPropertyPath_targetPropertyPath(element : DirectedRelationship, value : Property){
	find DirectedRelationshipPropertyPath(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'DistributedProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype DistributedProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern DistributedProperty(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "DistributedProperty");
}
/*
 * Pattern that queries elements with the stereotype 'ElementPropertyPath' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Element' object with the stereotype ElementPropertyPath.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ElementPropertyPath(element : Element, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ElementPropertyPath");
}
/*
 * Pattern that queries elements with the stereotype 'EndPathMultiplicity' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype EndPathMultiplicity.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern EndPathMultiplicity(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "EndPathMultiplicity");
}
/*
 * Pattern that queries the 'lower' attribute of elements with the stereotype 'EndPathMultiplicity'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'EndPathMultiplicity'.
 * 	valuespec : LiteralInteger : A value of the attribute 'lower'.
 */
pattern EndPathMultiplicity_lower(element : Property, valuespec : LiteralInteger){
	find EndPathMultiplicity(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "lower", valuespec);
}
/*
 * Pattern that queries the 'upper' attribute of elements with the stereotype 'EndPathMultiplicity'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'EndPathMultiplicity'.
 * 	valuespec : LiteralUnlimitedNatural : A value of the attribute 'upper'.
 */
pattern EndPathMultiplicity_upper(element : Property, valuespec : LiteralUnlimitedNatural){
	find EndPathMultiplicity(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "upper", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'NestedConnectorEnd' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ConnectorEnd' object with the stereotype NestedConnectorEnd.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern NestedConnectorEnd(element : ConnectorEnd, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "NestedConnectorEnd");
}
/*
 * Pattern that queries elements with the stereotype 'ParticipantProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype ParticipantProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ParticipantProperty(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ParticipantProperty");
}
/*
 * Pattern that queries the 'end' attribute of elements with the stereotype 'ParticipantProperty'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'ParticipantProperty'.
 * 	value : Property : A value of the attribute 'end'.
 */
pattern ParticipantProperty_end(element : Property, value : Property){
	find ParticipantProperty(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "end", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'PropertySpecificType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Classifier' object with the stereotype PropertySpecificType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern PropertySpecificType(element : Classifier, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "PropertySpecificType");
}
/*
 * Pattern that queries elements with the stereotype 'ValueType' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DataType' object with the stereotype ValueType.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ValueType(element : DataType, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ValueType");
}
/*
 * Pattern that queries the 'quantityKind' attribute of elements with the stereotype 'ValueType'.
 * 
 * Parameters: 
 * 	element: 'DataType' object with the stereotype 'ValueType'.
 * 	value : InstanceSpecification : A value of the attribute 'quantityKind'.
 */
pattern ValueType_quantityKind(element : DataType, value : InstanceSpecification){
	find ValueType(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "quantityKind", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'unit' attribute of elements with the stereotype 'ValueType'.
 * 
 * Parameters: 
 * 	element: 'DataType' object with the stereotype 'ValueType'.
 * 	value : InstanceSpecification : A value of the attribute 'unit'.
 */
pattern ValueType_unit(element : DataType, value : InstanceSpecification){
	find ValueType(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "unit", valuespec);
	ElementValue.element(valuespec, value);
}

// Model Elements

/*
 * Pattern that queries elements with the stereotype 'Conform' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'DirectedRelationship' object with the stereotype Conform.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Conform(element : DirectedRelationship, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Conform");
}
/*
 * Pattern that queries elements with the stereotype 'ElementGroup' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype ElementGroup.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ElementGroup(element : Comment, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ElementGroup");
}
/*
 * Pattern that queries the 'criterion' attribute of elements with the stereotype 'ElementGroup'.
 * 
 * Parameters: 
 * 	element: 'Comment' object with the stereotype 'ElementGroup'.
 * 	valuespec : LiteralString : A value of the attribute 'criterion'.
 */
pattern ElementGroup_criterion(element : Comment, valuespec : LiteralString){
	find ElementGroup(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "criterion", valuespec);
}
/*
 * Pattern that queries the 'member' attribute of elements with the stereotype 'ElementGroup'.
 * 
 * Parameters: 
 * 	element: 'Comment' object with the stereotype 'ElementGroup'.
 * 	value : Element : A value of the attribute 'member'.
 */
pattern ElementGroup_member(element : Comment, value : Element){
	find ElementGroup(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "member", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'name' attribute of elements with the stereotype 'ElementGroup'.
 * 
 * Parameters: 
 * 	element: 'Comment' object with the stereotype 'ElementGroup'.
 * 	valuespec : LiteralString : A value of the attribute 'name'.
 */
pattern ElementGroup_name(element : Comment, valuespec : LiteralString){
	find ElementGroup(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "name", valuespec);
}
/*
 * Pattern that queries the 'orderedMember' attribute of elements with the stereotype 'ElementGroup'.
 * 
 * Parameters: 
 * 	element: 'Comment' object with the stereotype 'ElementGroup'.
 * 	value : Element : A value of the attribute 'orderedMember'.
 */
pattern ElementGroup_orderedMember(element : Comment, value : Element){
	find ElementGroup(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "orderedMember", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'size' attribute of elements with the stereotype 'ElementGroup'.
 * 
 * Parameters: 
 * 	element: 'Comment' object with the stereotype 'ElementGroup'.
 * 	valuespec : LiteralInteger : A value of the attribute 'size'.
 */
pattern ElementGroup_size(element : Comment, valuespec : LiteralInteger){
	find ElementGroup(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "size", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'Expose' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Dependency' object with the stereotype Expose.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Expose(element : Dependency, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Expose");
}
/*
 * Pattern that queries elements with the stereotype 'Problem' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype Problem.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Problem(element : Comment, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Problem");
}
/*
 * Pattern that queries elements with the stereotype 'Rationale' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Comment' object with the stereotype Rationale.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Rationale(element : Comment, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Rationale");
}
/*
 * Pattern that queries elements with the stereotype 'Stakeholder' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Classifier' object with the stereotype Stakeholder.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Stakeholder(element : Classifier, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Stakeholder");
}
/*
 * Pattern that queries the 'concern' attribute of elements with the stereotype 'Stakeholder'.
 * 
 * Parameters: 
 * 	element: 'Classifier' object with the stereotype 'Stakeholder'.
 * 	value : Comment : A value of the attribute 'concern'.
 */
pattern Stakeholder_concern(element : Classifier, value : Comment){
	find Stakeholder(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "concern", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'concernList' attribute of elements with the stereotype 'Stakeholder'.
 * 
 * Parameters: 
 * 	element: 'Classifier' object with the stereotype 'Stakeholder'.
 * 	value : Comment : A value of the attribute 'concernList'.
 */
pattern Stakeholder_concernList(element : Classifier, value : Comment){
	find Stakeholder(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "concernList", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'View' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Namespace' object with the stereotype View.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern View(element : Namespace, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "View");
}
/*
 * Pattern that queries the 'stakeholder' attribute of elements with the stereotype 'View'.
 * 
 * Parameters: 
 * 	element: 'Namespace' object with the stereotype 'View'.
 * 	value : Classifier : A value of the attribute 'stakeholder'.
 */
pattern View_stakeholder(element : Namespace, value : Classifier){
	find View(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "stakeholder", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'viewPoint' attribute of elements with the stereotype 'View'.
 * 
 * Parameters: 
 * 	element: 'Namespace' object with the stereotype 'View'.
 * 	value : Class : A value of the attribute 'viewPoint'.
 */
pattern View_viewPoint(element : Namespace, value : Class){
	find View(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "viewPoint", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Viewpoint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Viewpoint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Viewpoint(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Viewpoint");
}
/*
 * Pattern that queries the 'concern' attribute of elements with the stereotype 'Viewpoint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Viewpoint'.
 * 	valuespec : LiteralString : A value of the attribute 'concern'.
 */
pattern Viewpoint_concern(element : Class, valuespec : LiteralString){
	find Viewpoint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "concern", valuespec);
}
/*
 * Pattern that queries the 'concernList' attribute of elements with the stereotype 'Viewpoint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Viewpoint'.
 * 	value : Comment : A value of the attribute 'concernList'.
 */
pattern Viewpoint_concernList(element : Class, value : Comment){
	find Viewpoint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "concernList", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'language' attribute of elements with the stereotype 'Viewpoint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Viewpoint'.
 * 	valuespec : LiteralString : A value of the attribute 'language'.
 */
pattern Viewpoint_language(element : Class, valuespec : LiteralString){
	find Viewpoint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "language", valuespec);
}
/*
 * Pattern that queries the 'method' attribute of elements with the stereotype 'Viewpoint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Viewpoint'.
 * 	value : Behavior : A value of the attribute 'method'.
 */
pattern Viewpoint_method(element : Class, value : Behavior){
	find Viewpoint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "method", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'presentation' attribute of elements with the stereotype 'Viewpoint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Viewpoint'.
 * 	valuespec : LiteralString : A value of the attribute 'presentation'.
 */
pattern Viewpoint_presentation(element : Class, valuespec : LiteralString){
	find Viewpoint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "presentation", valuespec);
}
/*
 * Pattern that queries the 'purpose' attribute of elements with the stereotype 'Viewpoint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Viewpoint'.
 * 	valuespec : LiteralString : A value of the attribute 'purpose'.
 */
pattern Viewpoint_purpose(element : Class, valuespec : LiteralString){
	find Viewpoint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "purpose", valuespec);
}
/*
 * Pattern that queries the 'stakeholder' attribute of elements with the stereotype 'Viewpoint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Viewpoint'.
 * 	value : Classifier : A value of the attribute 'stakeholder'.
 */
pattern Viewpoint_stakeholder(element : Class, value : Classifier){
	find Viewpoint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "stakeholder", valuespec);
	ElementValue.element(valuespec, value);
}


// Non Normative Extensions - Activiy
/*
 * Pattern that queries elements with the stereotype 'Essential' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype Essential.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Essential(element : Activity, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Essential");
}
/*
 * Pattern that queries elements with the stereotype 'System process' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'BehavioredClassifier' object with the stereotype System process.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Systemprocess(element : BehavioredClassifier, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "System process");
}
/*
 * Pattern that queries elements with the stereotype 'effbd' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype effbd.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern effbd(element : Activity, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "effbd");
}
/*
 * Pattern that queries elements with the stereotype 'nonStreaming' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype nonStreaming.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern nonStreaming(element : Activity, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "nonStreaming");
}
/*
 * Pattern that queries elements with the stereotype 'streaming' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Activity' object with the stereotype streaming.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern streaming(element : Activity, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "streaming");
}

// Non-Normative Extensions - Actors

/*
 * Pattern that queries elements with the stereotype 'Actuator' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Actor' object with the stereotype Actuator.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Actuator(element : Actor, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Actuator");
}
/*
 * Pattern that queries elements with the stereotype 'Boundary system' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Actor' object with the stereotype Boundary system.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Boundarysystem(element : Actor, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Boundary system");
}
/*
 * Pattern that queries elements with the stereotype 'Environmental effect' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Actor' object with the stereotype Environmental effect.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Environmentaleffect(element : Actor, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Environmental effect");
}
/*
 * Pattern that queries elements with the stereotype 'External system' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Actor' object with the stereotype External system.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Externalsystem(element : Actor, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "External system");
}
/*
 * Pattern that queries elements with the stereotype 'Sensor' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Actor' object with the stereotype Sensor.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Sensor(element : Actor, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Sensor");
}
/*
 * Pattern that queries elements with the stereotype 'User system' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Actor' object with the stereotype User system.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Usersystem(element : Actor, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "User system");
}

// Non-normative extensions - Blocks

/*
 * Pattern that queries elements with the stereotype 'Domain' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Domain.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Domain(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Domain");
}
/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Domain'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Domain'.
 * 	valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Domain_isEncapsulated(element : Class, valuespec : LiteralBoolean){
	find Domain(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'External' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype External.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern External(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "External");
}
/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'External'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'External'.
 * 	valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern External_isEncapsulated(element : Class, valuespec : LiteralBoolean){
	find External(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'Subsystem' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Subsystem.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Subsystem(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Subsystem");
}
/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'Subsystem'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Subsystem'.
 * 	valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Subsystem_isEncapsulated(element : Class, valuespec : LiteralBoolean){
	find Subsystem(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'System' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype System.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern System(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "System");
}
/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'System'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'System'.
 * 	valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern System_isEncapsulated(element : Class, valuespec : LiteralBoolean){
	find System(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'System context' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype System context.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Systemcontext(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "System context");
}
/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'System context'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'System context'.
 * 	valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern Systemcontext_isEncapsulated(element : Class, valuespec : LiteralBoolean){
	find Systemcontext(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}

// Non-normative extensions - Diagrams

/*
 * Pattern that queries elements with the stereotype 'BlockHierarchy' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Diagram' object with the stereotype BlockHierarchy.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern BlockHierarchy(element : Diagram, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "BlockHierarchy");
}
/*
 * Pattern that queries elements with the stereotype 'ContextDiagram' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Diagram' object with the stereotype ContextDiagram.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ContextDiagram(element : Diagram, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ContextDiagram");
}
/*
 * Pattern that queries elements with the stereotype 'Diagram Description' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Diagram' object with the stereotype Diagram Description.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern DiagramDescription(element : Diagram, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Diagram Description");
}
/*
 * Pattern that queries the 'Completion status' attribute of elements with the stereotype 'Diagram Description'.
 * 
 * Parameters: 
 * 	element: 'Diagram' object with the stereotype 'Diagram Description'.
 * 	valuespec : LiteralString : A value of the attribute 'Completion status'.
 */
pattern DiagramDescription_Completionstatus(element : Diagram, valuespec : LiteralString){
	find DiagramDescription(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Completion status", valuespec);
}
/*
 * Pattern that queries the 'Description' attribute of elements with the stereotype 'Diagram Description'.
 * 
 * Parameters: 
 * 	element: 'Diagram' object with the stereotype 'Diagram Description'.
 * 	valuespec : LiteralString : A value of the attribute 'Description'.
 */
pattern DiagramDescription_Description(element : Diagram, valuespec : LiteralString){
	find DiagramDescription(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Description", valuespec);
}
/*
 * Pattern that queries the 'Reference' attribute of elements with the stereotype 'Diagram Description'.
 * 
 * Parameters: 
 * 	element: 'Diagram' object with the stereotype 'Diagram Description'.
 * 	value : Element : A value of the attribute 'Reference'.
 */
pattern DiagramDescription_Reference(element : Diagram, value : Element){
	find DiagramDescription(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Reference", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Version' attribute of elements with the stereotype 'Diagram Description'.
 * 
 * Parameters: 
 * 	element: 'Diagram' object with the stereotype 'Diagram Description'.
 * 	valuespec : LiteralString : A value of the attribute 'Version'.
 */
pattern DiagramDescription_Version(element : Diagram, valuespec : LiteralString){
	find DiagramDescription(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Version", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'SwimLaneDiagram' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Diagram' object with the stereotype SwimLaneDiagram.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern SwimLaneDiagram(element : Diagram, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "SwimLaneDiagram");
}
/*
 * Pattern that queries elements with the stereotype 'diagramUsage' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Diagram' object with the stereotype diagramUsage.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern diagramUsage(element : Diagram, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "diagramUsage");
}

// Non-normative extensions - distributions

/*
 * Pattern that queries elements with the stereotype 'BasicInterval' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype BasicInterval.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern BasicInterval(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "BasicInterval");
}
/*
 * Pattern that queries the 'max' attribute of elements with the stereotype 'BasicInterval'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'BasicInterval'.
 * 	valuespec : LiteralReal : A value of the attribute 'max'.
 */
pattern BasicInterval_max(element : Property, valuespec : LiteralReal){
	find BasicInterval(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "max", valuespec);
}
/*
 * Pattern that queries the 'min' attribute of elements with the stereotype 'BasicInterval'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'BasicInterval'.
 * 	valuespec : LiteralReal : A value of the attribute 'min'.
 */
pattern BasicInterval_min(element : Property, valuespec : LiteralReal){
	find BasicInterval(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "min", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'Interval' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype Interval.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Interval(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Interval");
}
/*
 * Pattern that queries the 'max' attribute of elements with the stereotype 'Interval'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'Interval'.
 * 	valuespec : LiteralReal : A value of the attribute 'max'.
 */
pattern Interval_max(element : Property, valuespec : LiteralReal){
	find Interval(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "max", valuespec);
}
/*
 * Pattern that queries the 'min' attribute of elements with the stereotype 'Interval'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'Interval'.
 * 	valuespec : LiteralReal : A value of the attribute 'min'.
 */
pattern Interval_min(element : Property, valuespec : LiteralReal){
	find Interval(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "min", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'Normal' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype Normal.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Normal(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Normal");
}
/*
 * Pattern that queries the 'mean' attribute of elements with the stereotype 'Normal'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'Normal'.
 * 	valuespec : LiteralReal : A value of the attribute 'mean'.
 */
pattern Normal_mean(element : Property, valuespec : LiteralReal){
	find Normal(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "mean", valuespec);
}
/*
 * Pattern that queries the 'standardDeviation' attribute of elements with the stereotype 'Normal'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'Normal'.
 * 	valuespec : LiteralReal : A value of the attribute 'standardDeviation'.
 */
pattern Normal_standardDeviation(element : Property, valuespec : LiteralReal){
	find Normal(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "standardDeviation", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'Uniform' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype Uniform.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Uniform(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Uniform");
}
/*
 * Pattern that queries the 'max' attribute of elements with the stereotype 'Uniform'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'Uniform'.
 * 	valuespec : LiteralReal : A value of the attribute 'max'.
 */
pattern Uniform_max(element : Property, valuespec : LiteralReal){
	find Uniform(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "max", valuespec);
}
/*
 * Pattern that queries the 'min' attribute of elements with the stereotype 'Uniform'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'Uniform'.
 * 	valuespec : LiteralReal : A value of the attribute 'min'.
 */
pattern Uniform_min(element : Property, valuespec : LiteralReal){
	find Uniform(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "min", valuespec);
}

// Non-normative extensions - parametric
/*
 * Pattern that queries elements with the stereotype 'moe' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype moe.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern moe(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "moe");
}
/*
 * Pattern that queries elements with the stereotype 'objectiveFunction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ParameterableElement' object with the stereotype objectiveFunction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern objectiveFunction(element : ParameterableElement, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "objectiveFunction");
}

// Non-normative extensions - requirements

/*
 * Pattern that queries elements with the stereotype 'businessRequirement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype businessRequirement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern businessRequirement(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "businessRequirement");
}
/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	value : Element : A value of the attribute 'Derived'.
 */
pattern businessRequirement_Derived(element : Class, value : Element){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern businessRequirement_DerivedFrom(element : Class, value : Element){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern businessRequirement_Id(element : Class, valuespec : LiteralString){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Id", valuespec);
}
/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	value : Element : A value of the attribute 'Master'.
 */
pattern businessRequirement_Master(element : Class, value : Element){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern businessRequirement_RefinedBy(element : Class, value : NamedElement){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern businessRequirement_SatisfiedBy(element : Class, value : NamedElement){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern businessRequirement_Text(element : Class, valuespec : LiteralString){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Text", valuespec);
}
/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern businessRequirement_TracedTo(element : Class, value : NamedElement){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern businessRequirement_VerifiedBy(element : Class, value : NamedElement){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'risk' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'risk'.
 */
pattern businessRequirement_risk(element : Class, value : EnumerationLiteral){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "risk", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'source' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'source'.
 */
pattern businessRequirement_source(element : Class, valuespec : LiteralString){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "source", valuespec);
}
/*
 * Pattern that queries the 'verifyMethod' attribute of elements with the stereotype 'businessRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'businessRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'verifyMethod'.
 */
pattern businessRequirement_verifyMethod(element : Class, value : EnumerationLiteral){
	find businessRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "verifyMethod", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'designConstraint' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype designConstraint.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern designConstraint(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "designConstraint");
}
/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	value : Element : A value of the attribute 'Derived'.
 */
pattern designConstraint_Derived(element : Class, value : Element){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern designConstraint_DerivedFrom(element : Class, value : Element){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern designConstraint_Id(element : Class, valuespec : LiteralString){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Id", valuespec);
}
/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	value : Element : A value of the attribute 'Master'.
 */
pattern designConstraint_Master(element : Class, value : Element){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern designConstraint_RefinedBy(element : Class, value : NamedElement){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern designConstraint_SatisfiedBy(element : Class, value : NamedElement){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern designConstraint_Text(element : Class, valuespec : LiteralString){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Text", valuespec);
}
/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern designConstraint_TracedTo(element : Class, value : NamedElement){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern designConstraint_VerifiedBy(element : Class, value : NamedElement){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'risk' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	value : EnumerationLiteral : A value of the attribute 'risk'.
 */
pattern designConstraint_risk(element : Class, value : EnumerationLiteral){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "risk", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'source' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	valuespec : LiteralString : A value of the attribute 'source'.
 */
pattern designConstraint_source(element : Class, valuespec : LiteralString){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "source", valuespec);
}
/*
 * Pattern that queries the 'verifyMethod' attribute of elements with the stereotype 'designConstraint'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'designConstraint'.
 * 	value : EnumerationLiteral : A value of the attribute 'verifyMethod'.
 */
pattern designConstraint_verifyMethod(element : Class, value : EnumerationLiteral){
	find designConstraint(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "verifyMethod", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'extendedRequirement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype extendedRequirement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern extendedRequirement(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "extendedRequirement");
}
/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	value : Element : A value of the attribute 'Derived'.
 */
pattern extendedRequirement_Derived(element : Class, value : Element){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern extendedRequirement_DerivedFrom(element : Class, value : Element){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern extendedRequirement_Id(element : Class, valuespec : LiteralString){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Id", valuespec);
}
/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	value : Element : A value of the attribute 'Master'.
 */
pattern extendedRequirement_Master(element : Class, value : Element){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern extendedRequirement_RefinedBy(element : Class, value : NamedElement){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern extendedRequirement_SatisfiedBy(element : Class, value : NamedElement){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern extendedRequirement_Text(element : Class, valuespec : LiteralString){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Text", valuespec);
}
/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern extendedRequirement_TracedTo(element : Class, value : NamedElement){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern extendedRequirement_VerifiedBy(element : Class, value : NamedElement){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'risk' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'risk'.
 */
pattern extendedRequirement_risk(element : Class, value : EnumerationLiteral){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "risk", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'source' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'source'.
 */
pattern extendedRequirement_source(element : Class, valuespec : LiteralString){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "source", valuespec);
}
/*
 * Pattern that queries the 'verifyMethod' attribute of elements with the stereotype 'extendedRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'extendedRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'verifyMethod'.
 */
pattern extendedRequirement_verifyMethod(element : Class, value : EnumerationLiteral){
	find extendedRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "verifyMethod", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'functionalRequirement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype functionalRequirement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern functionalRequirement(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "functionalRequirement");
}
/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	value : Element : A value of the attribute 'Derived'.
 */
pattern functionalRequirement_Derived(element : Class, value : Element){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern functionalRequirement_DerivedFrom(element : Class, value : Element){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern functionalRequirement_Id(element : Class, valuespec : LiteralString){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Id", valuespec);
}
/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	value : Element : A value of the attribute 'Master'.
 */
pattern functionalRequirement_Master(element : Class, value : Element){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern functionalRequirement_RefinedBy(element : Class, value : NamedElement){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern functionalRequirement_SatisfiedBy(element : Class, value : NamedElement){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern functionalRequirement_Text(element : Class, valuespec : LiteralString){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Text", valuespec);
}
/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern functionalRequirement_TracedTo(element : Class, value : NamedElement){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern functionalRequirement_VerifiedBy(element : Class, value : NamedElement){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'risk' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'risk'.
 */
pattern functionalRequirement_risk(element : Class, value : EnumerationLiteral){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "risk", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'source' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'source'.
 */
pattern functionalRequirement_source(element : Class, valuespec : LiteralString){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "source", valuespec);
}
/*
 * Pattern that queries the 'verifyMethod' attribute of elements with the stereotype 'functionalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'functionalRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'verifyMethod'.
 */
pattern functionalRequirement_verifyMethod(element : Class, value : EnumerationLiteral){
	find functionalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "verifyMethod", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'interfaceRequirement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype interfaceRequirement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern interfaceRequirement(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "interfaceRequirement");
}
/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	value : Element : A value of the attribute 'Derived'.
 */
pattern interfaceRequirement_Derived(element : Class, value : Element){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern interfaceRequirement_DerivedFrom(element : Class, value : Element){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern interfaceRequirement_Id(element : Class, valuespec : LiteralString){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Id", valuespec);
}
/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	value : Element : A value of the attribute 'Master'.
 */
pattern interfaceRequirement_Master(element : Class, value : Element){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern interfaceRequirement_RefinedBy(element : Class, value : NamedElement){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern interfaceRequirement_SatisfiedBy(element : Class, value : NamedElement){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern interfaceRequirement_Text(element : Class, valuespec : LiteralString){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Text", valuespec);
}
/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern interfaceRequirement_TracedTo(element : Class, value : NamedElement){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern interfaceRequirement_VerifiedBy(element : Class, value : NamedElement){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'risk' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'risk'.
 */
pattern interfaceRequirement_risk(element : Class, value : EnumerationLiteral){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "risk", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'source' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'source'.
 */
pattern interfaceRequirement_source(element : Class, valuespec : LiteralString){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "source", valuespec);
}
/*
 * Pattern that queries the 'verifyMethod' attribute of elements with the stereotype 'interfaceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'interfaceRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'verifyMethod'.
 */
pattern interfaceRequirement_verifyMethod(element : Class, value : EnumerationLiteral){
	find interfaceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "verifyMethod", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'performanceRequirement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype performanceRequirement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern performanceRequirement(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "performanceRequirement");
}
/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	value : Element : A value of the attribute 'Derived'.
 */
pattern performanceRequirement_Derived(element : Class, value : Element){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern performanceRequirement_DerivedFrom(element : Class, value : Element){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern performanceRequirement_Id(element : Class, valuespec : LiteralString){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Id", valuespec);
}
/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	value : Element : A value of the attribute 'Master'.
 */
pattern performanceRequirement_Master(element : Class, value : Element){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern performanceRequirement_RefinedBy(element : Class, value : NamedElement){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern performanceRequirement_SatisfiedBy(element : Class, value : NamedElement){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern performanceRequirement_Text(element : Class, valuespec : LiteralString){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Text", valuespec);
}
/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern performanceRequirement_TracedTo(element : Class, value : NamedElement){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern performanceRequirement_VerifiedBy(element : Class, value : NamedElement){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'risk' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'risk'.
 */
pattern performanceRequirement_risk(element : Class, value : EnumerationLiteral){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "risk", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'source' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'source'.
 */
pattern performanceRequirement_source(element : Class, valuespec : LiteralString){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "source", valuespec);
}
/*
 * Pattern that queries the 'verifyMethod' attribute of elements with the stereotype 'performanceRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'performanceRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'verifyMethod'.
 */
pattern performanceRequirement_verifyMethod(element : Class, value : EnumerationLiteral){
	find performanceRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "verifyMethod", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'physicalRequirement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype physicalRequirement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern physicalRequirement(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "physicalRequirement");
}
/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	value : Element : A value of the attribute 'Derived'.
 */
pattern physicalRequirement_Derived(element : Class, value : Element){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern physicalRequirement_DerivedFrom(element : Class, value : Element){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern physicalRequirement_Id(element : Class, valuespec : LiteralString){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Id", valuespec);
}
/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	value : Element : A value of the attribute 'Master'.
 */
pattern physicalRequirement_Master(element : Class, value : Element){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern physicalRequirement_RefinedBy(element : Class, value : NamedElement){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern physicalRequirement_SatisfiedBy(element : Class, value : NamedElement){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern physicalRequirement_Text(element : Class, valuespec : LiteralString){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Text", valuespec);
}
/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern physicalRequirement_TracedTo(element : Class, value : NamedElement){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern physicalRequirement_VerifiedBy(element : Class, value : NamedElement){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'risk' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'risk'.
 */
pattern physicalRequirement_risk(element : Class, value : EnumerationLiteral){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "risk", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'source' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'source'.
 */
pattern physicalRequirement_source(element : Class, valuespec : LiteralString){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "source", valuespec);
}
/*
 * Pattern that queries the 'verifyMethod' attribute of elements with the stereotype 'physicalRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'physicalRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'verifyMethod'.
 */
pattern physicalRequirement_verifyMethod(element : Class, value : EnumerationLiteral){
	find physicalRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "verifyMethod", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'usabilityRequirement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype usabilityRequirement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern usabilityRequirement(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "usabilityRequirement");
}
/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	value : Element : A value of the attribute 'Derived'.
 */
pattern usabilityRequirement_Derived(element : Class, value : Element){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	value : Element : A value of the attribute 'DerivedFrom'.
 */
pattern usabilityRequirement_DerivedFrom(element : Class, value : Element){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern usabilityRequirement_Id(element : Class, valuespec : LiteralString){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Id", valuespec);
}
/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	value : Element : A value of the attribute 'Master'.
 */
pattern usabilityRequirement_Master(element : Class, value : Element){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern usabilityRequirement_RefinedBy(element : Class, value : NamedElement){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern usabilityRequirement_SatisfiedBy(element : Class, value : NamedElement){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern usabilityRequirement_Text(element : Class, valuespec : LiteralString){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Text", valuespec);
}
/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern usabilityRequirement_TracedTo(element : Class, value : NamedElement){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern usabilityRequirement_VerifiedBy(element : Class, value : NamedElement){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'risk' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'risk'.
 */
pattern usabilityRequirement_risk(element : Class, value : EnumerationLiteral){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "risk", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'source' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'source'.
 */
pattern usabilityRequirement_source(element : Class, valuespec : LiteralString){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "source", valuespec);
}
/*
 * Pattern that queries the 'verifyMethod' attribute of elements with the stereotype 'usabilityRequirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'usabilityRequirement'.
 * 	value : EnumerationLiteral : A value of the attribute 'verifyMethod'.
 */
pattern usabilityRequirement_verifyMethod(element : Class, value : EnumerationLiteral){
	find usabilityRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "verifyMethod", valuespec);
	InstanceValue.instance(valuespec, value);
}

// Ports and flows

/*
 * Pattern that queries elements with the stereotype 'AcceptChangeStructuralFeatureEventAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'AcceptEventAction' object with the stereotype AcceptChangeStructuralFeatureEventAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern AcceptChangeStructuralFeatureEventAction(element : AcceptEventAction, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "AcceptChangeStructuralFeatureEventAction");
}
/*
 * Pattern that queries elements with the stereotype 'ChangeStructuralFeatureEvent' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ChangeEvent' object with the stereotype ChangeStructuralFeatureEvent.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ChangeStructuralFeatureEvent(element : ChangeEvent, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ChangeStructuralFeatureEvent");
}
/*
 * Pattern that queries the 'structuralFeature' attribute of elements with the stereotype 'ChangeStructuralFeatureEvent'.
 * 
 * Parameters: 
 * 	element: 'ChangeEvent' object with the stereotype 'ChangeStructuralFeatureEvent'.
 * 	value : StructuralFeature : A value of the attribute 'structuralFeature'.
 */
pattern ChangeStructuralFeatureEvent_structuralFeature(element : ChangeEvent, value : StructuralFeature){
	find ChangeStructuralFeatureEvent(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "structuralFeature", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'DirectedFeature' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Feature' object with the stereotype DirectedFeature.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern DirectedFeature(element : Feature, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "DirectedFeature");
}
/*
 * Pattern that queries the 'featureDirection' attribute of elements with the stereotype 'DirectedFeature'.
 * 
 * Parameters: 
 * 	element: 'Feature' object with the stereotype 'DirectedFeature'.
 * 	value : EnumerationLiteral : A value of the attribute 'featureDirection'.
 */
pattern DirectedFeature_featureDirection(element : Feature, value : EnumerationLiteral){
	find DirectedFeature(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "featureDirection", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'FlowProperty' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Property' object with the stereotype FlowProperty.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern FlowProperty(element : Property, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "FlowProperty");
}
/*
 * Pattern that queries the 'direction' attribute of elements with the stereotype 'FlowProperty'.
 * 
 * Parameters: 
 * 	element: 'Property' object with the stereotype 'FlowProperty'.
 * 	value : EnumerationLiteral : A value of the attribute 'direction'.
 */
pattern FlowProperty_direction(element : Property, value : EnumerationLiteral){
	find FlowProperty(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "direction", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'FullPort' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Port' object with the stereotype FullPort.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern FullPort(element : Port, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "FullPort");
}
/*
 * Pattern that queries elements with the stereotype 'InterfaceBlock' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype InterfaceBlock.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern InterfaceBlock(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "InterfaceBlock");
}
/*
 * Pattern that queries the 'isEncapsulated' attribute of elements with the stereotype 'InterfaceBlock'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'InterfaceBlock'.
 * 	valuespec : LiteralBoolean : A value of the attribute 'isEncapsulated'.
 */
pattern InterfaceBlock_isEncapsulated(element : Class, valuespec : LiteralBoolean){
	find InterfaceBlock(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "isEncapsulated", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'InvocationOnNestedPortAction' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InvocationAction' object with the stereotype InvocationOnNestedPortAction.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern InvocationOnNestedPortAction(element : InvocationAction, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "InvocationOnNestedPortAction");
}
/*
 * Pattern that queries the 'onNestedPort' attribute of elements with the stereotype 'InvocationOnNestedPortAction'.
 * 
 * Parameters: 
 * 	element: 'InvocationAction' object with the stereotype 'InvocationOnNestedPortAction'.
 * 	value : Port : A value of the attribute 'onNestedPort'.
 */
pattern InvocationOnNestedPortAction_onNestedPort(element : InvocationAction, value : Port){
	find InvocationOnNestedPortAction(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "onNestedPort", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ItemFlow' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'InformationFlow' object with the stereotype ItemFlow.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ItemFlow(element : InformationFlow, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ItemFlow");
}
/*
 * Pattern that queries the 'itemProperty' attribute of elements with the stereotype 'ItemFlow'.
 * 
 * Parameters: 
 * 	element: 'InformationFlow' object with the stereotype 'ItemFlow'.
 * 	value : Property : A value of the attribute 'itemProperty'.
 */
pattern ItemFlow_itemProperty(element : InformationFlow, value : Property){
	find ItemFlow(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "itemProperty", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'ProxyPort' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Port' object with the stereotype ProxyPort.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern ProxyPort(element : Port, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "ProxyPort");
}
/*
 * Pattern that queries elements with the stereotype 'TriggerOnNestedPort' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Trigger' object with the stereotype TriggerOnNestedPort.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern TriggerOnNestedPort(element : Trigger, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "TriggerOnNestedPort");
}
/*
 * Pattern that queries the 'onNestedPort' attribute of elements with the stereotype 'TriggerOnNestedPort'.
 * 
 * Parameters: 
 * 	element: 'Trigger' object with the stereotype 'TriggerOnNestedPort'.
 * 	value : Port : A value of the attribute 'onNestedPort'.
 */
pattern TriggerOnNestedPort_onNestedPort(element : Trigger, value : Port){
	find TriggerOnNestedPort(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "onNestedPort", valuespec);
	ElementValue.element(valuespec, value);
}

// Requirements

/*
 * Pattern that queries elements with the stereotype 'AbstractRequirement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'NamedElement' object with the stereotype AbstractRequirement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern AbstractRequirement(element : NamedElement, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "AbstractRequirement");
}
/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'AbstractRequirement'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'AbstractRequirement'.
 * 	value : NamedElement : A value of the attribute 'Derived'.
 */
pattern AbstractRequirement_Derived(element : NamedElement, value : NamedElement){
	find AbstractRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'AbstractRequirement'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'AbstractRequirement'.
 * 	value : NamedElement : A value of the attribute 'DerivedFrom'.
 */
pattern AbstractRequirement_DerivedFrom(element : NamedElement, value : NamedElement){
	find AbstractRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'AbstractRequirement'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'AbstractRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern AbstractRequirement_Id(element : NamedElement, valuespec : LiteralString){
	find AbstractRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Id", valuespec);
}
/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'AbstractRequirement'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'AbstractRequirement'.
 * 	value : NamedElement : A value of the attribute 'Master'.
 */
pattern AbstractRequirement_Master(element : NamedElement, value : NamedElement){
	find AbstractRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'AbstractRequirement'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'AbstractRequirement'.
 * 	value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern AbstractRequirement_RefinedBy(element : NamedElement, value : NamedElement){
	find AbstractRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'AbstractRequirement'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'AbstractRequirement'.
 * 	value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern AbstractRequirement_SatisfiedBy(element : NamedElement, value : NamedElement){
	find AbstractRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'AbstractRequirement'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'AbstractRequirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern AbstractRequirement_Text(element : NamedElement, valuespec : LiteralString){
	find AbstractRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Text", valuespec);
}
/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'AbstractRequirement'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'AbstractRequirement'.
 * 	value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern AbstractRequirement_TracedTo(element : NamedElement, value : NamedElement){
	find AbstractRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'AbstractRequirement'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'AbstractRequirement'.
 * 	value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern AbstractRequirement_VerifiedBy(element : NamedElement, value : NamedElement){
	find AbstractRequirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Copy' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Copy.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Copy(element : Abstraction, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Copy");
}
/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'Copy'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Copy'.
 * 	value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern Copy_sourceContext(element : Abstraction, value : Classifier){
	find Copy(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'Copy'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Copy'.
 * 	value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern Copy_sourcePropertyPath(element : Abstraction, value : Property){
	find Copy(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'Copy'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Copy'.
 * 	value : Classifier : A value of the attribute 'targetContext'.
 */
pattern Copy_targetContext(element : Abstraction, value : Classifier){
	find Copy(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'Copy'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Copy'.
 * 	value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern Copy_targetPropertyPath(element : Abstraction, value : Property){
	find Copy(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'DeriveReqt' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype DeriveReqt.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern DeriveReqt(element : Abstraction, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "DeriveReqt");
}
/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'DeriveReqt'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'DeriveReqt'.
 * 	value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern DeriveReqt_sourceContext(element : Abstraction, value : Classifier){
	find DeriveReqt(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'DeriveReqt'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'DeriveReqt'.
 * 	value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern DeriveReqt_sourcePropertyPath(element : Abstraction, value : Property){
	find DeriveReqt(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'DeriveReqt'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'DeriveReqt'.
 * 	value : Classifier : A value of the attribute 'targetContext'.
 */
pattern DeriveReqt_targetContext(element : Abstraction, value : Classifier){
	find DeriveReqt(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'DeriveReqt'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'DeriveReqt'.
 * 	value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern DeriveReqt_targetPropertyPath(element : Abstraction, value : Property){
	find DeriveReqt(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Refine' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Refine.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Refine(element : Abstraction, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Refine");
}
/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'Refine'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Refine'.
 * 	value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern Refine_sourceContext(element : Abstraction, value : Classifier){
	find Refine(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'Refine'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Refine'.
 * 	value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern Refine_sourcePropertyPath(element : Abstraction, value : Property){
	find Refine(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'Refine'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Refine'.
 * 	value : Classifier : A value of the attribute 'targetContext'.
 */
pattern Refine_targetContext(element : Abstraction, value : Classifier){
	find Refine(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'Refine'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Refine'.
 * 	value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern Refine_targetPropertyPath(element : Abstraction, value : Property){
	find Refine(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Requirement' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Class' object with the stereotype Requirement.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Requirement(element : Class, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Requirement");
}
/*
 * Pattern that queries the 'Derived' attribute of elements with the stereotype 'Requirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Requirement'.
 * 	value : NamedElement : A value of the attribute 'Derived'.
 */
pattern Requirement_Derived(element : Class, value : NamedElement){
	find Requirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Derived", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'DerivedFrom' attribute of elements with the stereotype 'Requirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Requirement'.
 * 	value : NamedElement : A value of the attribute 'DerivedFrom'.
 */
pattern Requirement_DerivedFrom(element : Class, value : NamedElement){
	find Requirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "DerivedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Id' attribute of elements with the stereotype 'Requirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Requirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Id'.
 */
pattern Requirement_Id(element : Class, valuespec : LiteralString){
	find Requirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Id", valuespec);
}
/*
 * Pattern that queries the 'Master' attribute of elements with the stereotype 'Requirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Requirement'.
 * 	value : NamedElement : A value of the attribute 'Master'.
 */
pattern Requirement_Master(element : Class, value : NamedElement){
	find Requirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Master", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'RefinedBy' attribute of elements with the stereotype 'Requirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Requirement'.
 * 	value : NamedElement : A value of the attribute 'RefinedBy'.
 */
pattern Requirement_RefinedBy(element : Class, value : NamedElement){
	find Requirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "RefinedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'SatisfiedBy' attribute of elements with the stereotype 'Requirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Requirement'.
 * 	value : NamedElement : A value of the attribute 'SatisfiedBy'.
 */
pattern Requirement_SatisfiedBy(element : Class, value : NamedElement){
	find Requirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "SatisfiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Text' attribute of elements with the stereotype 'Requirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Requirement'.
 * 	valuespec : LiteralString : A value of the attribute 'Text'.
 */
pattern Requirement_Text(element : Class, valuespec : LiteralString){
	find Requirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Text", valuespec);
}
/*
 * Pattern that queries the 'TracedTo' attribute of elements with the stereotype 'Requirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Requirement'.
 * 	value : NamedElement : A value of the attribute 'TracedTo'.
 */
pattern Requirement_TracedTo(element : Class, value : NamedElement){
	find Requirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'VerifiedBy' attribute of elements with the stereotype 'Requirement'.
 * 
 * Parameters: 
 * 	element: 'Class' object with the stereotype 'Requirement'.
 * 	value : NamedElement : A value of the attribute 'VerifiedBy'.
 */
pattern Requirement_VerifiedBy(element : Class, value : NamedElement){
	find Requirement(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "VerifiedBy", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Satisfy' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Satisfy.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Satisfy(element : Abstraction, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Satisfy");
}
/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'Satisfy'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Satisfy'.
 * 	value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern Satisfy_sourceContext(element : Abstraction, value : Classifier){
	find Satisfy(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'Satisfy'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Satisfy'.
 * 	value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern Satisfy_sourcePropertyPath(element : Abstraction, value : Property){
	find Satisfy(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'Satisfy'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Satisfy'.
 * 	value : Classifier : A value of the attribute 'targetContext'.
 */
pattern Satisfy_targetContext(element : Abstraction, value : Classifier){
	find Satisfy(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'Satisfy'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Satisfy'.
 * 	value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern Satisfy_targetPropertyPath(element : Abstraction, value : Property){
	find Satisfy(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'TestCase' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'ParameterableElement' object with the stereotype TestCase.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern TestCase(element : ParameterableElement, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "TestCase");
}
/*
 * Pattern that queries elements with the stereotype 'Trace' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Trace.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Trace(element : Abstraction, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Trace");
}
/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'Trace'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Trace'.
 * 	value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern Trace_sourceContext(element : Abstraction, value : Classifier){
	find Trace(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'Trace'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Trace'.
 * 	value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern Trace_sourcePropertyPath(element : Abstraction, value : Property){
	find Trace(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'Trace'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Trace'.
 * 	value : Classifier : A value of the attribute 'targetContext'.
 */
pattern Trace_targetContext(element : Abstraction, value : Classifier){
	find Trace(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'Trace'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Trace'.
 * 	value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern Trace_targetPropertyPath(element : Abstraction, value : Property){
	find Trace(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'Verify' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Abstraction' object with the stereotype Verify.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Verify(element : Abstraction, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Verify");
}
/*
 * Pattern that queries the 'sourceContext' attribute of elements with the stereotype 'Verify'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Verify'.
 * 	value : Classifier : A value of the attribute 'sourceContext'.
 */
pattern Verify_sourceContext(element : Abstraction, value : Classifier){
	find Verify(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourceContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'sourcePropertyPath' attribute of elements with the stereotype 'Verify'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Verify'.
 * 	value : Property : A value of the attribute 'sourcePropertyPath'.
 */
pattern Verify_sourcePropertyPath(element : Abstraction, value : Property){
	find Verify(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "sourcePropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetContext' attribute of elements with the stereotype 'Verify'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Verify'.
 * 	value : Classifier : A value of the attribute 'targetContext'.
 */
pattern Verify_targetContext(element : Abstraction, value : Classifier){
	find Verify(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetContext", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'targetPropertyPath' attribute of elements with the stereotype 'Verify'.
 * 
 * Parameters: 
 * 	element: 'Abstraction' object with the stereotype 'Verify'.
 * 	value : Property : A value of the attribute 'targetPropertyPath'.
 */
pattern Verify_targetPropertyPath(element : Abstraction, value : Property){
	find Verify(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "targetPropertyPath", valuespec);
	ElementValue.element(valuespec, value);
}

// Deprecated elements

/*
 * Pattern that queries elements with the stereotype 'Allocated' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'NamedElement' object with the stereotype Allocated.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern Allocated(element : NamedElement, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "Allocated");
}
/*
 * Pattern that queries the 'allocatedFrom' attribute of elements with the stereotype 'Allocated'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'Allocated'.
 * 	value : NamedElement : A value of the attribute 'allocatedFrom'.
 */
pattern Allocated_allocatedFrom(element : NamedElement, value : NamedElement){
	find Allocated(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "allocatedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'allocatedTo' attribute of elements with the stereotype 'Allocated'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'Allocated'.
 * 	value : NamedElement : A value of the attribute 'allocatedTo'.
 */
pattern Allocated_allocatedTo(element : NamedElement, value : NamedElement){
	find Allocated(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "allocatedTo", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries elements with the stereotype 'FlowPort' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Port' object with the stereotype FlowPort.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern FlowPort(element : Port, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "FlowPort");
}
/*
 * Pattern that queries the 'direction' attribute of elements with the stereotype 'FlowPort'.
 * 
 * Parameters: 
 * 	element: 'Port' object with the stereotype 'FlowPort'.
 * 	value : EnumerationLiteral : A value of the attribute 'direction'.
 */
pattern FlowPort_direction(element : Port, value : EnumerationLiteral){
	find FlowPort(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "direction", valuespec);
	InstanceValue.instance(valuespec, value);
}
/*
 * Pattern that queries the 'isAtomic' attribute of elements with the stereotype 'FlowPort'.
 * 
 * Parameters: 
 * 	element: 'Port' object with the stereotype 'FlowPort'.
 * 	valuespec : LiteralBoolean : A value of the attribute 'isAtomic'.
 */
pattern FlowPort_isAtomic(element : Port, valuespec : LiteralBoolean){
	find FlowPort(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "isAtomic", valuespec);
}
/*
 * Pattern that queries elements with the stereotype 'FlowSpecification' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'Interface' object with the stereotype FlowSpecification.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern FlowSpecification(element : Interface, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "FlowSpecification");
}
/*
 * Pattern that queries elements with the stereotype 'RequirementRelated' or other stereotypes generalizing it.
 *
 * Parameters:
 * element : 'NamedElement' object with the stereotype RequirementRelated.
 * domainStereotypeInstance : Stereotype Application instance
 */
pattern RequirementRelated(element : NamedElement, domainStereotypeInstance : InstanceSpecification){
	find util.stereotypedElement(element, domainStereotypeInstance, "SysML", "RequirementRelated");
}
/*
 * Pattern that queries the 'Refines' attribute of elements with the stereotype 'RequirementRelated'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'RequirementRelated'.
 * 	value : Element : A value of the attribute 'Refines'.
 */
pattern RequirementRelated_Refines(element : NamedElement, value : Element){
	find RequirementRelated(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Refines", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Satisfies' attribute of elements with the stereotype 'RequirementRelated'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'RequirementRelated'.
 * 	value : Element : A value of the attribute 'Satisfies'.
 */
pattern RequirementRelated_Satisfies(element : NamedElement, value : Element){
	find RequirementRelated(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Satisfies", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'TracedFrom' attribute of elements with the stereotype 'RequirementRelated'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'RequirementRelated'.
 * 	value : Element : A value of the attribute 'TracedFrom'.
 */
pattern RequirementRelated_TracedFrom(element : NamedElement, value : Element){
	find RequirementRelated(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "TracedFrom", valuespec);
	ElementValue.element(valuespec, value);
}
/*
 * Pattern that queries the 'Verifies' attribute of elements with the stereotype 'RequirementRelated'.
 * 
 * Parameters: 
 * 	element: 'NamedElement' object with the stereotype 'RequirementRelated'.
 * 	value : Element : A value of the attribute 'Verifies'.
 */
pattern RequirementRelated_Verifies(element : NamedElement, value : Element){
	find RequirementRelated(element, domainStereotypeInstance);
	find util.slotValue(domainStereotypeInstance, "Verifies", valuespec);
	ElementValue.element(valuespec, value);
}