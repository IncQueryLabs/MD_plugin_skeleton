package util

import "http://www.nomagic.com/magicdraw/UML/2.5.1"

//tag::queries[]
/*
 * Matches if the parameter `general` is connected by a single
 * generalization relation to parameter `classifier`
 */
pattern generalizedClassifier(classifier : Classifier, general: Classifier) {
	Generalization.general(gen, general);
	Generalization.specific(gen, classifier);
}

/**
 * Matches if the parameter `general` is connected with a
 * series of generalization relations to parameter `classifier`
 */
pattern indirectGeneralization(classifier: Classifier, general : Classifier) {
	find generalizedClassifier+(classifier, general);
}

/* 
 * Matches if the parameter`classifier` can be substituted with the parameter
 * `classifier`: they are either the same, or there is an `indirectGeneralization`
 * relationship between them. 
 */
pattern compatibleClassifier(classifier : Classifier, general: Classifier) {
	find generalizedClassifier*(classifier, general);	
}

/*
 * Matches the parameter `element` and its direct owning Package
 */
pattern owningPackage(element : Package, owner : Package){
	Package.owningPackage(element, owner);
}

/*
 * Matches the parameter `element` with its direct or indirect owning packages or itself
 */
pattern owningPackageOrSelf(element : Package, owner : Package) {
	find owningPackage*(element, owner);
}

/*
 * Collects the InstanceSpecification of the given Element having the stereotype with the given name
 */
pattern stereotypedElement(element : Element, domainStereotypeInstance : InstanceSpecification, profileName : String, stereotypeName : String) {
	Element.appliedStereotypeInstance(element, domainStereotypeInstance);
	InstanceSpecification.classifier(domainStereotypeInstance, domainStereotype);
	find compatibleClassifier(domainStereotype, superStereotype);
	Stereotype.owningPackage(superStereotype, owner);
	find owningPackageOrSelf(owner, profile);
	Profile.name(profile, profileName);
	Stereotype.name(superStereotype, stereotypeName);
}

/*
 * Matches the value of the slot with the given name
 */
pattern slotValue(domainStereotypeInstance : InstanceSpecification, featureName : String, valuespec: ValueSpecification) {
	InstanceSpecification.slot(domainStereotypeInstance, slot);
	Slot.definingFeature.name(slot, featureName);
	Slot.value(slot, valuespec);
}
// end::queries[]