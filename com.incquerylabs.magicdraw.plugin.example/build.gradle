import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.stream.Collectors
import java.util.zip.ZipFile


plugins {
  id "org.xtext.xtend" version "1.0.21"
}

xtext.version = "2.13.0"

String buildNumber = project.hasProperty('buildNumber') ? project.getProperty('buildNumber') : System.currentTimeSeconds()
String timestamp = DateTimeFormatter.ofPattern("yyyy-MM-dd-HH:mm").format(LocalDateTime.now())

//This is the part that is painful to maintain, as MD releases tend to move around these library jars
String[] classpathLibraries = ['lib/patch.jar', 'lib/md.jar', 'lib/md_api.jar', 'lib/md_common.jar', 'lib/md_common_api.jar', 'lib/md_common_test.jar', 'lib/tw_common.jar', 'lib/tw_common_api.jar', 'lib/launcher.jar', 'lib/activation.jar', 'lib/annotation.jar', 'lib/batik.jar', 'lib/bundles/ch.qos.logback.classic_1.0.13.jar', 'lib/bundles/ch.qos.logback.core_1.0.13.jar', 'lib/bundles/cmof_1.4.0.201711281514/cmof14.jar', 'lib/bundles/cmof_1.4.0.201711281514/tas.jar', 'lib/bundles/com.esotericsoftware.kryo_2.22.0.201401231130.jar', 'lib/bundles/com.google.gson_2.7.0.jar', 'lib/bundles/com.google.guava_18.0.0.jar', 'lib/bundles/com.nomagic.annotations_1.0.0/com.nomagic.annotation-1.0.jar', 'lib/bundles/com.nomagic.ci.binary_17.0.5.v20170809-1439.jar', 'lib/bundles/com.nomagic.ci.metamodel.project_17.0.5.v20170809-1439.jar', 'lib/bundles/com.nomagic.ci.persistence.local_17.0.5.v20170809-1439.jar', 'lib/bundles/com.nomagic.ci.persistence_17.0.5.v20170809-1439.jar', 'lib/bundles/com.nomagic.ci.services_17.0.5.v20170809-1439.jar', 'lib/bundles/com.nomagic.ci_17.0.5.v20170809-1439.jar', 'lib/bundles/com.nomagic.magicdraw.ce_18.1.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw.core.diagram_18.1.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw.core.project.options_18.1.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw.core_1.0.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw.esi.binary.metamodel_18.1.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw.esi.esiproject_18.1.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw.esi.uuidmap_18.1.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw.foundation_2.0.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw.osgi.fragment_1.0.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw.security_18.3.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw.uml2_2.5.0.201708091450.jar', 'lib/bundles/com.nomagic.magicdraw_17.0.5.201708091450.jar', 'lib/bundles/com.teamdev.jxbrowser.chromium.internal.linux32_6.13.0.jar', 'lib/bundles/com.teamdev.jxbrowser.chromium.internal.linux64_6.13.0.jar', 'lib/bundles/com.teamdev.jxbrowser.chromium.internal.mac_6.13.0.jar', 'lib/bundles/com.teamdev.jxbrowser.chromium.internal.win32_6.13.0.jar', 'lib/bundles/com.teamdev.jxbrowser.chromium_6.13.0.jar', 'lib/bundles/com.typesafe.config_1.3.0.jar', 'lib/bundles/de.schlichtherle.truezip_7.4.3.v20171128-1504/lib/truezip-driver-zip-7.4.3.jar', 'lib/bundles/de.schlichtherle.truezip_7.4.3.v20171128-1504/lib/truezip-kernel-7.4.3.jar', 'lib/bundles/gnu.trove_3.0.3/lib/trove-3.0.3.jar', 'lib/bundles/io.dropwizard.metrics.core_3.1.2.jar', 'lib/bundles/io.netty.buffer_4.0.37.Final.jar', 'lib/bundles/io.netty.codec_4.0.37.Final.jar', 'lib/bundles/io.netty.common_4.0.37.Final.jar', 'lib/bundles/io.netty.handler_4.0.37.Final.jar', 'lib/bundles/io.netty.transport_4.0.37.Final.jar', 'lib/bundles/javax.jmi_1.0.0.201711281514/javax_jmi-1_0-fr.jar', 'lib/bundles/joda-time_2.9.1.jar', 'lib/bundles/lz4-java_1.3.0.jar', 'lib/bundles/org.apache.commons.codec_1.6.0.v201305230611.jar', 'lib/bundles/org.apache.commons.collections_3.2.1.jar', 'lib/bundles/org.apache.commons.compress_1.3.0.jar', 'lib/bundles/org.apache.commons.io_2.4.0.jar', 'lib/bundles/org.apache.commons.lang_2.6.0.v201404270220.jar', 'lib/bundles/org.apache.directory.api_1.0.0.jar', 'lib/bundles/org.apache.log4j_1.2.15.v201005080500.jar', 'lib/bundles/org.apache.servicemix.bundles.jsr305_2.0.1.1.jar', 'lib/bundles/org.eclipse.core.contenttype_3.4.200.v20140207-1251.jar', 'lib/bundles/org.eclipse.core.jobs_3.6.0.v20140424-0053.jar', 'lib/bundles/org.eclipse.core.runtime_3.10.0.v20140318-2214.jar', 'lib/bundles/org.eclipse.emf.common_2.10.1.v20140901-1043.jar', 'lib/bundles/org.eclipse.emf.ecore.xmi_2.10.1.v20140901-1043.jar', 'lib/bundles/org.eclipse.emf.ecore_2.10.1.v20140901-1043.jar','lib/bundles/org.eclipse.equinox.app_1.3.200.v20130910-1609.jar', 'lib/bundles/org.eclipse.equinox.common_3.6.200.v20130402-1505.jar', 'lib/bundles/org.eclipse.equinox.ds_1.4.200.v20131126-2331.jar', 'lib/bundles/org.eclipse.equinox.preferences_3.5.200.v20140224-1527.jar', 'lib/bundles/org.eclipse.equinox.registry_3.5.400.v20140428-1507.jar', 'lib/bundles/org.eclipse.equinox.util_1.0.500.v20130404-1337.jar', 'lib/bundles/org.eclipse.osgi.services_3.4.0.v20140312-2051.jar', 'lib/bundles/org.eclipse.osgi_3.10.1.v20140909-1633.jar', 'lib/bundles/org.eclipse.uml2.common_1.5.0.v200905041045.jar', 'lib/bundles/org.hamcrest.core_1.3.0.v201303031735.jar', 'lib/bundles/org.jboss.netty_3.10.6.Final.jar', 'lib/bundles/org.json_1.0.0.255610281323.jar', 'lib/bundles/org.junit_4.11.0.v201303080030/junit.jar', 'lib/bundles/org.uncommons.maths_1.2.2.201301151508/lib/uncommons-maths-1.2.2a.jar', 'lib/bundles/slf4j.api_1.7.7.jar', 'lib/com.nomagic.osgi.launcher-17.0.5-SNAPSHOT.jar', 'lib/commons-compress-1.3.jar', 'lib/commons-httpclient-3.1.jar', 'lib/commons-logging-1.0.4.jar', 'lib/concurrent.jar', 'lib/EccpressoAll.jar', 'lib/ehcache-2.10.1.jar', 'lib/flexlm.jar', 'lib/graphics/clibwrapper_jiio.jar', 'lib/graphics/freehep-base.jar', 'lib/graphics/freehep-graphics2d.jar', 'lib/graphics/freehep-graphicsio-emf.jar', 'lib/graphics/freehep-graphicsio-ps.jar', 'lib/graphics/freehep-graphicsio.jar', 'lib/graphics/jai_imageio.jar', 'lib/gson-2.2.4.jar', 'lib/HTMLEditorLight.jar', 'lib/javassist.jar', 'lib/jhall.jar', 'lib/jide-action.jar', 'lib/jide-charts.jar', 'lib/jide-common.jar', 'lib/jide-components.jar', 'lib/jide-dock.jar', 'lib/jide-editor.jar', 'lib/jide-gantt.jar', 'lib/jide-grids.jar', 'lib/jide-shortcut.jar', 'lib/jide-diff.jar', 'lib/jimi.jar', 'lib/jmyspell-core-1.0.0-beta-2.jar', 'lib/jna.jar', 'lib/jnp-client.jar', 'lib/jtidy-sources.zip', 'lib/jtidy.jar', 'lib/lucene-analyzers-common-4.10.3.jar', 'lib/lucene-core-4.10.3.jar', 'lib/webservice/axis-config.jar', 'lib/webservice/axis.jar', 'lib/webservice/commons-discovery-0.2.jar', 'lib/webservice/jaxrpc.jar', 'lib/webservice/mdserviceclient.jar', 'lib/webservice/rsclient.jar', 'lib/webservice/wsdl4j-1.5.1.jar', 'lib/xalan.jar', 'lib/xmlbeans-2.6.0.jar', 'lib/y.jar']


// Apply the java-library plugin to add support for Java Library

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'distribution'



// In this section you declare where to find the dependencies of your project
repositories {
    ivy {
        url 'http://download1.nomagic.com/'
        layout 'pattern', {
            artifact '/[module][revision]/[classifier].[ext]'
        }
    } 
    jcenter()
    mavenCentral()
    maven {
    	url 'https://build.incquerylabs.com/nexus/repository/v4md/'
    }
	jcenter()
}

configurations {
    preCompile
}

dependencies {      
    
    preCompile group: 'com.nomagic', name: 'magicdraw', version: '185sp3', classifier: 'MagicDraw_185_sp3_no_install', ext: 'zip'
    preCompile group: 'com.nomagic', name: 'sysml', version: '185sp3', classifier: 'SysML_Plugin_185_sp3_bundle', ext: 'zip'
    preCompile group: 'com.nomagic', name: 'cst', version: '185sp3', classifier: 'Cameo_Simulation_Toolkit_185_sp3', ext: 'zip'
    preCompile group: 'com.incquerylabs.v4md', name: 'com.incquerylabs.v4md', version: '2.0.0.M3', classifier: 'no-install', ext: 'zip'
    
    // This ensures classpath load order to match the MagicDraw provided order and then includes extras needed for non-OpenAPI stuff.
    compile files(classpathLibraries.collect { 'build/dependency-cache/extracted/' + it })
    compile fileTree(dir: 'build/dependency-cache/extracted', include: ['lib/**/*.jar', 'plugins/**/*.jar'], exclude: ([ classpathLibraries, ['plugins/com.nomagic.collaborator.publisher/**/*.jar', 'plugins/com.nomagic.magicdraw.emfuml2xmi*/**/*.jar'] ]).flatten())
    compile fileTree(dir: 'lib', include: ['**/*.jar'])
}

task extractDependencies {
    configurations.preCompile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        inputs.file artifact.file
        def zipFile = new ZipFile(artifact.file)
        zipFile.entries().each { entry ->
            if (!entry.isDirectory()) {
                outputs.file 'build/dependency-cache/extracted/' + entry.getName()
            }
        }
    }
    doLast {
        inputs.files.each { archive ->
            copy {
                from zipTree(archive)
                into 'build/dependency-cache/extracted'
            }
        }
        fileTree(dir: 'build/dependency-cache/extracted', include: '*.zip').each { archive ->
            copy {
                from zipTree(archive)
                into 'build/dependency-cache/extracted'
            }
        }
    }
}
compileJava.dependsOn extractDependencies

javadoc {
    options.addStringOption("sourcepath", "")
    options.tags = [ "generated", "noreference" ]
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task javadocZip(type: Zip, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

class PreDist extends DefaultTask {
    String humanVersion
    String internalVersion
    String groupName
    String buildTimestamp
    String descriptor

    @TaskAction
    void executeTask() {
        project.copy {
            from 'src/main/dist'
            exclude 'template'
            from 'src/main/dist/template'
            exclude 'plugins'
            from 'src/main/dist/template/plugins'
            exclude '${group}'
            into 'build/generated-dist'
        }
        project.copy {
            from project.configurations.compile.resolvedConfiguration.resolvedArtifacts.file
            from 'lib'
            from project.jar
            into "build/generated-dist/plugins/${groupName}"
        }
        project.copy {
            from project.getTasks().getByName('javadocZip')
            into "build/generated-dist/plugins/${groupName}/javadoc"
        }
        project.fileTree(dir: 'build/generated-dist', include: '**/*${group}*/**').each { file ->
            file.renameTo(project.file(file.getAbsolutePath().replace('${group}', "${groupName}")))
        }

        String pluginLibraries = ''
        project.fileTree(dir: "build/generated-dist/plugins/${groupName}", include: '**/*.jar').each { file ->
            pluginLibraries += '\t\t<library name=\"' + file.absolutePath.replaceAll(~/.*build\/generated-dist\/plugins\/${groupName}\//, '') + '\"/>' + System.lineSeparator()
        }
        project.copy {
            from 'src/main/dist/template/plugins/${group}/plugin.xml'
            filter { String line -> line.replace('<!-- START AUTO-GENERATED -->', '<!-- START AUTO-GENERATED -->' + System.lineSeparator() + System.lineSeparator() + pluginLibraries) }
            filter { String line -> line.replace('${human.version}', humanVersion) }
            filter { String line -> line.replace('${internal.version}', internalVersion) }
            into "build/generated-dist/plugins/${groupName}"
        }

        String descriptorFiles = ''
        project.fileTree(dir: 'build/generated-dist').each { file ->
            String relativePath = file.absolutePath.replaceAll(/.*build\/generated-dist\//, '')
            descriptorFiles += '\t\t<file from=\"' + relativePath + '\" to=\"' + relativePath + '\"/>' + System.lineSeparator()
        }
        project.copy {
            from "src/main/dist/template/data/resourcemanager/${descriptor}"
            filter { String line -> line.replace('<!-- START AUTO-GENERATED -->', '<!-- START AUTO-GENERATED -->' + System.lineSeparator() + System.lineSeparator() + descriptorFiles) }
            filter { String line -> line.replace('${human.version}', humanVersion) }
            filter { String line -> line.replace('${internal.version}', internalVersion) }
            filter { String line -> line.replace('${build.timestamp}', buildTimestamp) }
            into 'build/generated-dist/data/resourcemanager'
        }
    }
}

task preDist(type: PreDist) {
    humanVersion = version
    internalVersion = buildNumber
    groupName = magicdDrawGroupName
    buildTimestamp = timestamp
    descriptor = descriptorFile
}
preDist.dependsOn jar
preDist.dependsOn javadocZip

distributions {
    main {
        contents {
            exclude 'template'
            from 'build/generated-dist'
        }
    }
}

distZip {
    includeEmptyDirs false
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    eachFile { file ->
        file.setPath(path.substring(path.indexOf("/") + 1, path.length()))
    }
}
distZip.dependsOn preDist

installDist {
    destinationDir = file('build/plugin')
    doLast {
        copy {
            fileMode 0755
            from 'build/dependency-cache/extracted'
            from 'build/plugin'
            into 'build/install'
        }
    }
}
installDist.dependsOn distZip


task runJava(type: JavaExec) {
	doFirst {
        classpath fileTree(dir: 'build/install', include: ['lib/**/*.jar'])
    }

	workingDir 'build/install'
    ignoreExitValue true

    standardOutput = System.out
    errorOutput = System.err
	
    main = 'com.nomagic.osgi.launcher.ProductionFrameworkLauncher'
    jvmArgs = ['-Xmx8192M', '-Xss512M', '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=false', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-dev', '-splash:data/splash.png','-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true', '-Dcom.sun.management.jmxremote.port=1099', '-Dcom.sun.management.jmxremote.authenticate=false', '-Dcom.sun.management.jmxremote.ssl=false']
	args 'DEVELOPER'
}
runJava.dependsOn installDist

task debugJava(type: JavaExec) {
    doFirst {
    	classpath fileTree(dir: 'build/install', include: ['lib/**/*.jar'])
    }
    workingDir 'build/install'
    ignoreExitValue true

    standardOutput = System.out
    errorOutput = System.err

    main = 'com.nomagic.osgi.launcher.ProductionFrameworkLauncher'
    jvmArgs = ['-Xmx8192M', '-Xss512M', '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=false', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-dev', '-splash:data/splash.png', '-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true', '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099', '-Dcom.sun.management.jmxremote.port=1099', '-Dcom.sun.management.jmxremote.authenticate=false', '-Dcom.sun.management.jmxremote.ssl=false']
    // arguments to pass to the application
    args 'DEVELOPER'
}
debugJava.dependsOn installDist


task preparePluginDistributions {
	configurations.preCompile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
		if(artifact.getName().contains('v4md')){
			copy{
				from artifact.getFile().getParentFile()
				include '*v4md*.zip'
				rename { String fileName ->
					fileName.replace("-SNAPSHOT-no-install", "")
				}
				into 'build/distributions/'
			}
		}
    }
}
preparePluginDistributions.dependsOn installDist


