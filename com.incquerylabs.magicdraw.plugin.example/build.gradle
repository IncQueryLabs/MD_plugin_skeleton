import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.util.stream.Collectors
import java.util.zip.ZipFile

plugins {
  id "org.xtext.xtend" version "1.0.21"
}

xtext.version = "2.13.0"

String buildNumber = project.hasProperty('buildNumber') ? project.getProperty('buildNumber') : System.currentTimeSeconds()
String timestamp = DateTimeFormatter.ofPattern("yyyy-MM-dd-HH:mm").format(LocalDateTime.now())

//This is the part that is painful to maintain, as MD releases tend to move around these library jars
ext.classpathLibraries = [
        'lib/patch.jar',
        'lib/md.jar',
        'lib/md_api.jar',
        'lib/md_common.jar',
        'lib/md_common_api.jar',
        'lib/md_common_test.jar',
        'lib/tw_common.jar',
        'lib/tw_common_api.jar',
        'lib/launcher.jar',
        'lib/activation.jar'
]

// Apply the java-library plugin to add support for Java Library

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'distribution'



// In this section you declare where to find the dependencies of your project
repositories {
    ivy {
        url 'http://download1.nomagic.com/'
        layout 'pattern', {
            artifact '/[module][revision]/[classifier].[ext]'
        }
    } 
    jcenter()
    mavenCentral()
    maven {
    	url 'https://build.incquerylabs.com/nexus/repository/v4md/'
    }
	jcenter()
}

configurations {
    preCompile
}

dependencies {      
    
    preCompile group: 'com.nomagic', name: 'magicdraw', version: '185sp3', classifier: 'MagicDraw_185_sp3_no_install', ext: 'zip'
    preCompile group: 'com.nomagic', name: 'sysml', version: '185sp3', classifier: 'SysML_Plugin_185_sp3_bundle', ext: 'zip'
    preCompile group: 'com.nomagic', name: 'cst', version: '185sp3', classifier: 'Cameo_Simulation_Toolkit_185_sp3', ext: 'zip'
    preCompile group: 'com.incquerylabs.v4md', name: 'com.incquerylabs.v4md', version: '2.0.0.M3', classifier: 'no-install', ext: 'zip'
    
    // This ensures classpath load order to match the MagicDraw provided order and then includes extras needed for non-OpenAPI stuff.
    compile files(classpathLibraries.collect { 'build/dependency-cache/extracted/' + it })
    compile fileTree(dir: 'build/dependency-cache/extracted', include: ['lib/**/*.jar', 'plugins/**/*.jar'], exclude: ([ classpathLibraries, ['plugins/com.nomagic.collaborator.publisher/**/*.jar', 'plugins/com.nomagic.magicdraw.emfuml2xmi*/**/*.jar'] ]).flatten())
    compile fileTree(dir: 'lib', include: ['**/*.jar'])
}

task extractDependencies {
    configurations.preCompile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        inputs.file artifact.file
        def zipFile = new ZipFile(artifact.file)
        zipFile.entries().each { entry ->
            if (!entry.isDirectory()) {
                outputs.file 'build/dependency-cache/extracted/' + entry.getName()
            }
        }
    }
    doLast {
        inputs.files.each { archive ->
            copy {
                from zipTree(archive)
                into 'build/dependency-cache/extracted'
            }
        }
        fileTree(dir: 'build/dependency-cache/extracted', include: '*.zip').each { archive ->
            copy {
                from zipTree(archive)
                into 'build/dependency-cache/extracted'
            }
        }
    }
}
compileJava.dependsOn extractDependencies

javadoc {
    options.addStringOption("sourcepath", "")
    options.tags = [ "generated", "noreference" ]
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        // disable the crazy super-strict doclint tool in Java 8
        //noinspection SpellCheckingInspection
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task javadocZip(type: Zip, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

class PreDist extends DefaultTask {
    String humanVersion
    String internalVersion
    String groupName
    String buildTimestamp
    String descriptor

    @TaskAction
    void executeTask() {
        project.copy {
            from 'src/main/dist'
            exclude 'template'
            from 'src/main/dist/template'
            exclude 'plugins'
            from 'src/main/dist/template/plugins'
            exclude '${group}'
            into 'build/generated-dist'
        }
        project.copy {
            from project.configurations.compile.resolvedConfiguration.resolvedArtifacts.file
            from 'lib'
            from project.jar
            into "build/generated-dist/plugins/${groupName}"
        }
        project.copy {
            from project.getTasks().getByName('javadocZip')
            into "build/generated-dist/plugins/${groupName}/javadoc"
        }
        project.fileTree(dir: 'build/generated-dist', include: '**/*${group}*/**').each { file ->
            file.renameTo(project.file(file.getAbsolutePath().replace('${group}', "${groupName}")))
        }

        String pluginLibraries = ''
        project.fileTree(dir: "build/generated-dist/plugins/${groupName}", include: '**/*.jar').each { file ->
            pluginLibraries += '\t\t<library name=\"' + file.absolutePath.replaceAll(~/.*build\/generated-dist\/plugins\/${groupName}\//, '') + '\"/>' + System.lineSeparator()
        }
        project.copy {
            from 'src/main/dist/template/plugins/${group}/plugin.xml'
            filter { String line -> line.replace('<!-- START AUTO-GENERATED -->', '<!-- START AUTO-GENERATED -->' + System.lineSeparator() + System.lineSeparator() + pluginLibraries) }
            filter { String line -> line.replace('${human.version}', humanVersion) }
            filter { String line -> line.replace('${internal.version}', internalVersion) }
            into "build/generated-dist/plugins/${groupName}"
        }

        String descriptorFiles = ''
        project.fileTree(dir: 'build/generated-dist').each { file ->
            String relativePath = file.absolutePath.replaceAll(/.*build\/generated-dist\//, '')
            descriptorFiles += '\t\t<file from=\"' + relativePath + '\" to=\"' + relativePath + '\"/>' + System.lineSeparator()
        }
        project.copy {
            from "src/main/dist/template/data/resourcemanager/${descriptor}"
            filter { String line -> line.replace('<!-- START AUTO-GENERATED -->', '<!-- START AUTO-GENERATED -->' + System.lineSeparator() + System.lineSeparator() + descriptorFiles) }
            filter { String line -> line.replace('${human.version}', humanVersion) }
            filter { String line -> line.replace('${internal.version}', internalVersion) }
            filter { String line -> line.replace('${build.timestamp}', buildTimestamp) }
            into 'build/generated-dist/data/resourcemanager'
        }
    }
}

task preDist(type: PreDist) {
    humanVersion = version
    internalVersion = buildNumber
    groupName = magicdDrawGroupName
    buildTimestamp = timestamp
    descriptor = descriptorFile
}
preDist.dependsOn jar
preDist.dependsOn javadocZip

distributions {
    main {
        contents {
            exclude 'template'
            from 'build/generated-dist'
        }
    }
}

distZip {
    includeEmptyDirs false
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    eachFile { file ->
        file.setPath(path.substring(path.indexOf("/") + 1, path.length()))
    }
}
distZip.dependsOn preDist

installDist {
    destinationDir = file('build/plugin')
    doLast {
        copy {
            fileMode 0755
            from 'build/dependency-cache/extracted'
            from 'build/plugin'
            into 'build/install'
        }
    }
}
installDist.dependsOn distZip


task runJava(type: JavaExec) {
	doFirst {
        classpath fileTree(dir: 'build/install', include: ['lib/**/*.jar'])
    }

	workingDir 'build/install'
    ignoreExitValue true

    standardOutput = System.out
    errorOutput = System.err
	
    main = 'com.nomagic.osgi.launcher.ProductionFrameworkLauncher'
    jvmArgs = ['-Xmx8192M', '-Xss512M', '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=false', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-dev', '-splash:data/splash.png','-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true', '-Dcom.sun.management.jmxremote.port=1099', '-Dcom.sun.management.jmxremote.authenticate=false', '-Dcom.sun.management.jmxremote.ssl=false']
	args 'DEVELOPER'
}
runJava.dependsOn installDist

task debugJava(type: JavaExec) {
    doFirst {
    	classpath fileTree(dir: 'build/install', include: ['lib/**/*.jar'])
    }
    workingDir 'build/install'
    ignoreExitValue true

    standardOutput = System.out
    errorOutput = System.err

    main = 'com.nomagic.osgi.launcher.ProductionFrameworkLauncher'
    jvmArgs = ['-Xmx8192M', '-Xss512M', '-DLOCALCONFIG=true', '-DWINCONFIG=true', '-Djsse.enableSNIExtension=false', '-Djava.net.preferIPv4Stack=true', '-Dcom.sun.media.imageio.disableCodecLib=true', '-noverify', '-Dlocal.config.dir.ext=-dev', '-splash:data/splash.png', '-Dmd.class.path=$java.class.path', '-Dcom.nomagic.osgi.config.dir=configuration', '-Desi.system.config=data/application.conf', '-Dlogback.configurationFile=data/logback.xml', '-Dsun.locale.formatasdefault=true', '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9099', '-Dcom.sun.management.jmxremote.port=1099', '-Dcom.sun.management.jmxremote.authenticate=false', '-Dcom.sun.management.jmxremote.ssl=false']
    // arguments to pass to the application
    args 'DEVELOPER'
}
debugJava.dependsOn installDist


task preparePluginDistributions {
	configurations.preCompile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
		if(artifact.getName().contains('v4md')){
			copy{
				from artifact.getFile().getParentFile()
				include '*v4md*.zip'
				rename { String fileName ->
					fileName.replace("-SNAPSHOT-no-install", "")
				}
				into 'build/distributions/'
			}
		}
    }
}
preparePluginDistributions.dependsOn installDist


